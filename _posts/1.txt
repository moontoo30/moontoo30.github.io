 
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ



            소스코드 작성
편집기           →                 소스코드
                                  (Helloworld.java)


       컴파일
havac Helloworld.java       바이트(byte) 코드
          →                      (Helloworld.class)


    실행명령
hava Helloworld             java virtual machine 이 기계어 번역 후 실행



   →        실행결과
      

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


bin >  binary  (실행파일)  (이클립스를 통해 컴파일한 파일)

.class 라는 확장자를 가진 파일들




src >  source   (내가 작정한코드)  

.java 라는 확장자를 가진 파일들




package (폴더개념)

같은 이름을 가진 파일들을 분리해줌



ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

code > 컴파일   > 실행

.java. > .class





ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

작성된 소스 파일의 최상단에 package 키워드와 sec03이 명시돼 있는것은

소스코드가 sec03.exam01 패키지에 생성 되었기 떄문에

이와 같은 패키지 선언이 있어야함

package sec03.exam01



ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

클래스 선언     (클래스는 필드 또는 메소드를 포함하는 블록,   메소드는 어떤 일을 처리하는 실행문들을 모아 놓은 블록을 뜻함) 

Public class Hello 를 클래스 선언부라고 함

Publi class는 공개 클래스라는 뜻이고, Hello는 클래스 이름을 나타냄

클래스 이름은 소스 파일명과 동일해야 하며, 대소문자도 일치해야 함




javac 명령어로 컴파일하면 클래스 이름에 .class가 붙어 바이트 코드 파일이 생성 

일반적으로 Hello.class를 Hello바이트 코드 파일이라고 부르지 않고 Hello 클래스라고 간단히 부름.




java 명령어로 바이트 코드 파일을 실행하려면 클래스 블록 내부에 다음과 같은 main()멧드 블록을 가지고 있어야 함

Public static vold main(String[] args) {

      System.out.prinln("Hello, Java")
}



중괄호 {} 블록의 앞부분인 Public static vold main(String[] args)를 메소드 선언부라고 함

괄호 바로 앞의 main 은 메소드 이름

java 명령어로 바이트 코드 파일을 실행하면 제일먼저 main) 메소드를 찾아 블록 내부를 실행함

그래서 main()메소드를 프로그램 실행 진입점 이라고 부름




ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


주석

프로그램에 상관없이 설명을 붙이는것

컴파일 과정에서 무시되고 실행문만 바이트 코드로 번역됨


라인 주석           //             //부터 라인 긑까지 주석으로 처리함

범위 주석      /*     */           /*  와  */사이에 있는 내용은 모두 주석으로 처리함

도큐먼트 주석 /**    */         /**와 */ 사이에 있는 내용은 무도 주석으로 처리함
                                     주로 javadoc 명령어로 API 도큐먼트를 생성하는 데 사용



문자열 내부에는 주석을 붙일 수 없음 

ex) System.out.prinln("Hello, /* 주석이 될 수 없음 */ welcome to the java world!") ;


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


실행문과 세미콜론(:)

main() 메소드는 블록 내부에는 다향한 실맹문들이 작성됨

다음 코드는 모니터에 괄호 ()안의 내용(매개값)을 출력하는 실행문

실행문 끝에는 반드시 세미콜론을 붙여서 실행문이 끝났음을 표시해주어야 하며 그렇지 않을시 에러 발생


System.out.println("Hello, Java");


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ




실행문 작성 예제

 
int x;                                        //변수 x 선언
 
x = 1;                                      //변수 x에 1을 저장

int y = 2;                                  //변수 y를 선언하고 2를 저장

int result = x + y;                       //변수 result를 선언하고 변수 x와 y를 더한 값을 저장

System.out.println(result) ;            //println 메소드 호출



컴파일러는 세미콜론까지 하나의 실행문으로 해석하기 때문에 하나의 실행문을 여러 줄에걸쳐서 작성하고맨마지막에 세미콜론을 붙여도 됨

세미콜론을 구분자로 해서 한 줄에 여러가지 실행문을 작성할 수도 있음


int x = 1; int y = 2;

int result = 

x _ y ;


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


바이트 코드 파일: 자바 소스 파일을 javac 명령어로 컴파일 한 파일

JVM : 자바 가상 기계(JVM)은 바이트 코드 파일을 운영체제를 위한 완전한 기계어로 번역하고
실행하는 역할을 함 JVM은 java 명령어에 의해 구동

클래스 선언:자바 소스 파일은 클래스 선언부와 클래스 블록으로 구성

이렇게 작성하는 것을 클래스 선언이라고 함

main()메소드:java 명령어로 바이트 코드 파일을 실행하면 제일먼저 main()메소드를 찾아 블록 내부를 실행
그래서 main()메소드를 프로그램 실행 진입점 이라고 부름

주석: 주석은 프로그램 실행과는 상관없이 코드에 설명을 붙인것을 말함 
주석은 컴파일 과정에서 무시됨

실행문: 변수 선언,값 저장, 메소드 호출에 해당하는 코드를 말함
실행문 끝에는 세미콜론을 붙여야함








